<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Home</title>
<link>https://peter-amerkhanian.com/blog.html</link>
<atom:link href="https://peter-amerkhanian.com/blog.xml" rel="self" type="application/rss+xml"/>
<description>Peter Amerkhanian&#39;s Blog</description>
<generator>quarto-1.4.551</generator>
<lastBuildDate>Sun, 16 Jun 2024 07:00:00 GMT</lastBuildDate>
<item>
  <title>Building Time-series Utilities for matplotlib</title>
  <dc:creator>Peter Amerkhanian</dc:creator>
  <link>https://peter-amerkhanian.com/posts/time-series-matplotlib/</link>
  <description><![CDATA[ In my day job I’ve recently been working on visualizing time series data with <code>matplotlib</code>. When I’ve wanted some sort of specific formatting or behavior, I’ve had to wade deep in the library documentation to figure out the code for the things I want to do. That’s fine, but what frustrates me is that in the back of my mind, I’m pretty sure these are all things I’ve actually done before. A few years ago in graduate school I took a course that was heavy on <code>matplotlib</code> plotting, and I spent many hours figuring out bizarre techniques for getting very specific results. Unfortunately I’ve forgotten almost all of that library-specific minutiae. ]]></description>
  <category>Python</category>
  <guid>https://peter-amerkhanian.com/posts/time-series-matplotlib/</guid>
  <pubDate>Sun, 16 Jun 2024 07:00:00 GMT</pubDate>
  <media:content url="https://peter-amerkhanian.com/posts/time-series-matplotlib/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>The Covariance Matrix from Scratch</title>
  <dc:creator>Peter Amerkhanian</dc:creator>
  <link>https://peter-amerkhanian.com/posts/covariance-matrices/</link>
  <description><![CDATA[ The following is an overview of how to construct a covariance matrix. The post is largely based on exercises in <span class="citation" data-cites="cohen_practical_2022">(Cohen 2022)</span>, an excellent overview of applied, numerical linear algebra in python. I overview how to construct a covariance matrix, but in the process I try to touch on a lot of important concepts in fundamental linear algebra: matrix multiplication, matrix transformations, the centering matrix, and getting from the idea of a matrix operation to the formal notation. ]]></description>
  <category>Python</category>
  <category>Linear Algebra</category>
  <guid>https://peter-amerkhanian.com/posts/covariance-matrices/</guid>
  <pubDate>Fri, 31 May 2024 07:00:00 GMT</pubDate>
  <media:content url="https://peter-amerkhanian.com/posts/covariance-matrices/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Double Integrals in Probability</title>
  <dc:creator>Peter Amerkhanian</dc:creator>
  <link>https://peter-amerkhanian.com/posts/multiple-integration/</link>
  <description><![CDATA[ The following are some notes on using integration for finding cumulative probability distribution functions in the univariate and joint/multivariate settings. The exercises and citations are all coming out of a textbook for a course in vector calculus <span class="citation" data-cites="strang_calculus_2016-1">(Strang and Herman 2016)</span>. I wrote this out because: ]]></description>
  <category>R</category>
  <category>Calculus</category>
  <category>Probability</category>
  <guid>https://peter-amerkhanian.com/posts/multiple-integration/</guid>
  <pubDate>Sun, 14 Apr 2024 07:00:00 GMT</pubDate>
  <media:content url="https://peter-amerkhanian.com/posts/multiple-integration/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Benchmarking parquet and dask</title>
  <dc:creator>Peter Amerkhanian</dc:creator>
  <link>https://peter-amerkhanian.com/posts/dask-data-io/</link>
  <description><![CDATA[ The following example involves a situation where I want to analyze historical data on Bay Area Rapid Transit (BART) ridership at the station/hour level. BART kindly makes such ridership information publicly available on their <a href="https://www.bart.gov/about/reports/ridership">open data portal</a>. This post will examine the following workflow: ]]></description>
  <category>Python</category>
  <category>Data Management</category>
  <guid>https://peter-amerkhanian.com/posts/dask-data-io/</guid>
  <pubDate>Fri, 12 Apr 2024 07:00:00 GMT</pubDate>
  <media:content url="https://peter-amerkhanian.com/posts/dask-data-io/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Production Maximization with Lagrange Mutlipliers</title>
  <dc:creator>Peter Amerkhanian</dc:creator>
  <link>https://peter-amerkhanian.com/posts/lagrange-cobb-douglas/</link>
  <description><![CDATA[ In <a href="../minima-3d/index.ipynb">“Simple Optimization in 3D”</a>, I blogged about a basic optimization problem in three dimensional space. In this post, I’ll look at a more complex problem that deals with kind-of abstract quantities and involves a constraint. This is also an opportunity to cover the <a href="https://en.wikipedia.org/wiki/Lagrange_multiplier">method of lagrange multipliers</a> optimization strategy. ]]></description>
  <category>R</category>
  <category>Calculus</category>
  <guid>https://peter-amerkhanian.com/posts/lagrange-cobb-douglas/</guid>
  <pubDate>Sun, 17 Mar 2024 07:00:00 GMT</pubDate>
  <media:content url="https://peter-amerkhanian.com/posts/lagrange-cobb-douglas/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Simple Optimization in 3D</title>
  <dc:creator>Peter Amerkhanian</dc:creator>
  <link>https://peter-amerkhanian.com/posts/minima-3d/</link>
  <description><![CDATA[ I’ve previously blogged about optimization in two dimensional space: ]]></description>
  <category>R</category>
  <category>Calculus</category>
  <guid>https://peter-amerkhanian.com/posts/minima-3d/</guid>
  <pubDate>Sat, 09 Mar 2024 08:00:00 GMT</pubDate>
  <media:content url="https://peter-amerkhanian.com/posts/minima-3d/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Linear Approximation in 3D</title>
  <dc:creator>Peter Amerkhanian</dc:creator>
  <link>https://peter-amerkhanian.com/posts/linear-approximation-3d/</link>
  <description><![CDATA[ The following is a calculus problem that I think provides a good overview of linear approximation, a method for approximating a general function using a linear function. This is a simple application of taylor series approximation, and is used for optics, oscillation, and electric resistivity problems <span class="citation" data-cites="noauthor_linear_2023">(<span>“Linear Approximation”</span> 2023)</span>. The following image from <span class="citation" data-cites="strang_calculus_2016-1">(Strang and Herman 2016, chap. 4.4)</span> provides some good intuition of what this approximation looks like: ]]></description>
  <category>Python</category>
  <category>Calculus</category>
  <guid>https://peter-amerkhanian.com/posts/linear-approximation-3d/</guid>
  <pubDate>Sat, 02 Mar 2024 08:00:00 GMT</pubDate>
  <media:content url="https://peter-amerkhanian.com/posts/linear-approximation-3d/thumbnail.png" medium="image" type="image/png" height="143" width="144"/>
</item>
<item>
  <title>Overfitting and The Train-Test Split</title>
  <dc:creator>Peter Amerkhanian</dc:creator>
  <link>https://peter-amerkhanian.com/posts/overfitting/</link>
  <description><![CDATA[ The following is an exercise with synthetic data intended to memorialize some thoughts on models and resampling methods. I won’t reference a lot of specific books here, but generally this post is influenced by <span class="citation" data-cites="james_introduction_2013">James et al. (2013)</span> and <span class="citation" data-cites="hastie_elements_2016">Hastie, Tibshirani, and Friedman (2016)</span>. ]]></description>
  <category>Python</category>
  <category>Statistics</category>
  <guid>https://peter-amerkhanian.com/posts/overfitting/</guid>
  <pubDate>Fri, 08 Dec 2023 08:00:00 GMT</pubDate>
  <media:content url="https://peter-amerkhanian.com/posts/overfitting/thumbnail.png" medium="image" type="image/png" height="143" width="144"/>
</item>
<item>
  <title>Iterated Expectations</title>
  <dc:creator>Peter Amerkhanian</dc:creator>
  <link>https://peter-amerkhanian.com/posts/iterated-expectations/</link>
  <description><![CDATA[ I recently came across a list of <a href="https://twitter.com/causalinf/status/1259448663270658050">10 theorems/proofs</a> that you “need to know” if you do econometrics. These were compiled by <a href="https://econ.msu.edu/faculty/wooldridge/">Jeffrey Wooldridge</a>, an economist and textbook author whose introductory textbook has been fundamental to my interest in econometrics. As an exercise, I’m working through these 10 items, compiling resources, textbook passages, and data exercises that I think can make them easier to understand. The first item I’m trying to write my notes on is the Law of Iterated Expectations, but I’ll be prefacing/augmenting the notes with some discussion of basic probability for completeness. ]]></description>
  <category>Python</category>
  <category>Probability</category>
  <guid>https://peter-amerkhanian.com/posts/iterated-expectations/</guid>
  <pubDate>Fri, 01 Dec 2023 08:00:00 GMT</pubDate>
  <media:content url="https://peter-amerkhanian.com/posts/iterated-expectations/thumbnail.png" medium="image" type="image/png" height="143" width="144"/>
</item>
<item>
  <title>Newton’s Method From The Ground Up</title>
  <dc:creator>Peter Amerkhanian</dc:creator>
  <link>https://peter-amerkhanian.com/posts/newtons-method/</link>
  <description><![CDATA[ In the context of a Differential Calculus course, <a href="https://en.wikipedia.org/wiki/Newton%27s_method#Applications">Newton’s Method</a>, also referred to as The Newton-Raphson Method, seems to typically come up near the end of the semester, offering a brief look into the world of “numerical methods” and how we might solve complex problems in the real world. I think that it’s a cool topic and I wanted to write an extended blog post about it. The main purpose of this is to ensure that I always have personal reference materials for Newton’s Method, but perhaps it can be helpful to other readers. ]]></description>
  <category>Python</category>
  <category>Calculus</category>
  <guid>https://peter-amerkhanian.com/posts/newtons-method/</guid>
  <pubDate>Fri, 03 Nov 2023 07:00:00 GMT</pubDate>
  <media:content url="https://peter-amerkhanian.com/posts/newtons-method/thumbnail.png" medium="image" type="image/png" height="143" width="144"/>
</item>
<item>
  <title>Simple Constrained Optimization in 2D</title>
  <dc:creator>Peter Amerkhanian</dc:creator>
  <link>https://peter-amerkhanian.com/posts/simple-constrained-optimization/</link>
  <description><![CDATA[ The following are my notes on a basic calculus 1 homework question. I liked the question a lot, so decided to write out it all out for my future use. ]]></description>
  <category>Python</category>
  <category>Calculus</category>
  <guid>https://peter-amerkhanian.com/posts/simple-constrained-optimization/</guid>
  <pubDate>Tue, 04 Jul 2023 07:00:00 GMT</pubDate>
  <media:content url="https://peter-amerkhanian.com/posts/simple-constrained-optimization/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Buy vs. Rent, A Financial Modeling Workflow in Python</title>
  <link>https://peter-amerkhanian.com/posts/rent-vs-buy/</link>
  <description><![CDATA[ This post goes through the following exercises: ]]></description>
  <category>Python</category>
  <category>Probability</category>
  <guid>https://peter-amerkhanian.com/posts/rent-vs-buy/</guid>
  <pubDate>Sat, 06 Aug 2022 07:00:00 GMT</pubDate>
  <media:content url="https://peter-amerkhanian.com/posts/rent-vs-buy/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Reliable PDF Scraping with tabula-py</title>
  <dc:creator>Peter Amerkhanian</dc:creator>
  <link>https://peter-amerkhanian.com/posts/pdf-scraping/</link>
  <description><![CDATA[ I’m interested in conducting a data analysis that involves the market value of single family homes in San Mateo County, California. This data can be hard to come by, but I’ve found a good county level resource – The San Mateo Association of Realtors’ <a href="https://www.samcar.org/member-resources/market-data/">“Market Data” page</a>. ]]></description>
  <category>Python</category>
  <category>Data Management</category>
  <guid>https://peter-amerkhanian.com/posts/pdf-scraping/</guid>
  <pubDate>Wed, 20 Jul 2022 07:00:00 GMT</pubDate>
  <media:content url="https://peter-amerkhanian.com/posts/pdf-scraping/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
